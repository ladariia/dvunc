{"ast":null,"code":"var _jsxFileName = \"/Users/darialadilova/Desktop/AUTH/client/src/components/AppRouter.js\";\n//логика навигации по страницам\nimport React from 'react';\nimport { Routes, Route, Redirect } from 'react-router-dom';\nimport { authRoutes } from '../routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppRouter = () => {\n  const isAuth = false; //показывает авторизован пользователь или нет -  в дальнейшем будем хранить это в локал стор, отправлять токен на сервер, убеждаться в том что он валидный, и затем переменную присваивать\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: authRoutes.map(_ref => {\n      let {\n        path,\n        Component\n      } = _ref;\n      return (\n        /*#__PURE__*/\n        /* для каждого эл-та массива отрисовываем роут */\n        /* exact = путь должен точно совпадать */\n        _jsxDEV(Route, {\n          path: path,\n          component: Component,\n          exact: true\n        }, path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_c = AppRouter;\nexport default AppRouter;\nvar _c;\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"names":["React","Routes","Route","Redirect","authRoutes","jsxDEV","_jsxDEV","AppRouter","isAuth","children","map","_ref","path","Component","component","exact","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/darialadilova/Desktop/AUTH/client/src/components/AppRouter.js"],"sourcesContent":["//логика навигации по страницам\nimport React from 'react';\nimport { Routes, Route, Redirect } from 'react-router-dom'\nimport { authRoutes } from '../routes';\n\nconst AppRouter = () => {\n    const isAuth = false //показывает авторизован пользователь или нет -  в дальнейшем будем хранить это в локал стор, отправлять токен на сервер, убеждаться в том что он валидный, и затем переменную присваивать\n    return (\n        <Routes>\n            {/* если не один из роутсов не отрабатывает - отрабатывает последний */}\n            {/* импорт массива с роутами */}\n            {authRoutes.map(({ path, Component }) =>\n                /* для каждого эл-та массива отрисовываем роут */\n                /* exact = путь должен точно совпадать */\n                <Route key={path} path={path} component={Component} exact />\n            )}\n        </Routes>\n    );\n};\n\nexport default AppRouter;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAC1D,SAASC,UAAU,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,MAAMC,MAAM,GAAG,KAAK,EAAC;EACrB,oBACIF,OAAA,CAACL,MAAM;IAAAQ,QAAA,EAGFL,UAAU,CAACM,GAAG,CAACC,IAAA;MAAA,IAAC;QAAEC,IAAI;QAAEC;MAAU,CAAC,GAAAF,IAAA;MAAA;QAAA;QAChC;QACA;QACAL,OAAA,CAACJ,KAAK;UAAYU,IAAI,EAAEA,IAAK;UAACE,SAAS,EAAED,SAAU;UAACE,KAAK;QAAA,GAA7CH,IAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAA4C;IAAA;EAC/D;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEjB,CAAC;AAACC,EAAA,GAbIb,SAAS;AAef,eAAeA,SAAS;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}