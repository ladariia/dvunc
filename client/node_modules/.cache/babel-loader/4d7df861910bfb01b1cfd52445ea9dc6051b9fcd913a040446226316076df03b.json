{"ast":null,"code":"var _jsxFileName = \"/Users/darialadilova/Desktop/AUTH/client/src/components/AppRouter.js\",\n  _s = $RefreshSig$();\n//логика навигации по страницам\nimport React from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { authRoutes, publicRoutes } from '../routes';\nimport { COURSES_ROUTE } from '../utils/consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppRouter = () => {\n  _s();\n  const {\n    user\n  } = useContext(contextValue); //показывает авторизован пользователь или нет -  в дальнейшем будем хранить это в локал стор, отправлять токен на сервер, убеждаться в том что он валидный, и затем переменную присваивать\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [isAuth === true && authRoutes.map(_ref => {\n      let {\n        path,\n        Component\n      } = _ref;\n      return (\n        /*#__PURE__*/\n        /* для каждого эл-та массива отрисовываем роут */\n        /* exact = путь должен точно совпадать */\n        _jsxDEV(Route, {\n          path: path,\n          element: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 56\n          }, this),\n          exact: true\n        }, path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this)\n      );\n    }), publicRoutes.map(_ref2 => {\n      let {\n        path,\n        Component\n      } = _ref2;\n      return (\n        /*#__PURE__*/\n        /* для каждого эл-та массива отрисовываем роут */\n        /* exact = путь должен точно совпадать */\n        _jsxDEV(Route, {\n          path: path,\n          element: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 56\n          }, this),\n          exact: true\n        }, path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this)\n      );\n    }), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: COURSES_ROUTE,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n_s(AppRouter, \"JGtbL9nF23m+KDtp3kj55mw9GTc=\");\n_c = AppRouter;\nexport default AppRouter;\nvar _c;\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"names":["React","Routes","Route","Navigate","authRoutes","publicRoutes","COURSES_ROUTE","jsxDEV","_jsxDEV","AppRouter","_s","user","useContext","contextValue","children","isAuth","map","_ref","path","Component","element","fileName","_jsxFileName","lineNumber","columnNumber","exact","_ref2","to","replace","_c","$RefreshReg$"],"sources":["/Users/darialadilova/Desktop/AUTH/client/src/components/AppRouter.js"],"sourcesContent":["//логика навигации по страницам\nimport React from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom'\nimport { authRoutes, publicRoutes } from '../routes';\nimport { COURSES_ROUTE } from '../utils/consts';\n\nconst AppRouter = () => {\n    const {user} = useContext(contextValue); //показывает авторизован пользователь или нет -  в дальнейшем будем хранить это в локал стор, отправлять токен на сервер, убеждаться в том что он валидный, и затем переменную присваивать\n    return (\n        <Routes>\n            {/* если не один из роутсов не отрабатывает - отрабатывает последний */}\n            {/* импорт массива с роутами */}\n            {isAuth === true && authRoutes.map(({ path, Component }) =>\n                /* для каждого эл-та массива отрисовываем роут */\n                /* exact = путь должен точно совпадать */\n                <Route key={path} path={path} element={<Component />} exact />\n            )}\n            {publicRoutes.map(({ path, Component }) =>\n                /* для каждого эл-та массива отрисовываем роут */\n                /* exact = путь должен точно совпадать */\n                <Route key={path} path={path} element={<Component />} exact />\n            )}\n            <Route path=\"*\" element={<Navigate to={COURSES_ROUTE} replace />} />\n        </Routes>\n    );\n};\n\nexport default AppRouter;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAC1D,SAASC,UAAU,EAAEC,YAAY,QAAQ,WAAW;AACpD,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAI,CAAC,GAAGC,UAAU,CAACC,YAAY,CAAC,CAAC,CAAC;EACzC,oBACIL,OAAA,CAACP,MAAM;IAAAa,QAAA,GAGFC,MAAM,KAAK,IAAI,IAAIX,UAAU,CAACY,GAAG,CAACC,IAAA;MAAA,IAAC;QAAEC,IAAI;QAAEC;MAAU,CAAC,GAAAF,IAAA;MAAA;QAAA;QACnD;QACA;QACAT,OAAA,CAACN,KAAK;UAAYgB,IAAI,EAAEA,IAAK;UAACE,OAAO,eAAEZ,OAAA,CAACW,SAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAI;UAACC,KAAK;QAAA,GAA/CP,IAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAA8C;IAAA,EACjE,EACAnB,YAAY,CAACW,GAAG,CAACU,KAAA;MAAA,IAAC;QAAER,IAAI;QAAEC;MAAU,CAAC,GAAAO,KAAA;MAAA;QAAA;QAClC;QACA;QACAlB,OAAA,CAACN,KAAK;UAAYgB,IAAI,EAAEA,IAAK;UAACE,OAAO,eAAEZ,OAAA,CAACW,SAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAI;UAACC,KAAK;QAAA,GAA/CP,IAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAA8C;IAAA,EACjE,eACDhB,OAAA,CAACN,KAAK;MAACgB,IAAI,EAAC,GAAG;MAACE,OAAO,eAAEZ,OAAA,CAACL,QAAQ;QAACwB,EAAE,EAAErB,aAAc;QAACsB,OAAO;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/D;AAEjB,CAAC;AAACd,EAAA,CAnBID,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AAqBf,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}