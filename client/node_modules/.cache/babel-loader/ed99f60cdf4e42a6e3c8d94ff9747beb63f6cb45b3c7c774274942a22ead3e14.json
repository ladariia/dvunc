{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nexport default class CourseStore {\n  //работа с mobx\n  constructor() {\n    this._types = [];\n    this._formats = [];\n    this._courses = [];\n    this._selectedType = {}; //null object\n    this._selectedFormat = {};\n    makeAutoObservable(this); //теперь mobx будет следить за изм этих переменных\n  }\n\n  //Actionы\n  // - любой блок кода, который может изменять такие данные (state): пользовательские события, внутренние данные и т.д.\n  setTypes(types) {\n    this._types = types;\n  }\n  setFormats(formats) {\n    this._formats = formats;\n  }\n  setCourses(courses) {\n    this._courses = courses;\n  }\n  setSelectedType(type) {\n    this._selectedType = type;\n  }\n  setSelectedFormat(format) {\n    this._selectedFormat = format;\n  }\n\n  //создадим геттеры - для получения каких-то пременных из состояния\n  //вызываются только в том случае, если перменная кя была внутри была изменена\n  get types() {\n    return this._types;\n  }\n  get formats() {\n    return this._formats;\n  }\n  get courses() {\n    return this._courses;\n  }\n  get selectedType() {\n    return this._selectedType;\n  }\n  get selectedFormat() {\n    return this._selectedFormat;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","CourseStore","constructor","_types","_formats","_courses","_selectedType","_selectedFormat","setTypes","types","setFormats","formats","setCourses","courses","setSelectedType","type","setSelectedFormat","format","selectedType","selectedFormat"],"sources":["/Users/darialadilova/Desktop/AUTH/client/src/store/CourseStore.js"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport default class CourseStore {\n    //работа с mobx\n    constructor() {\n        this._types = [\n\n        ]\n        this._formats = [\n\n        ]\n        this._courses = [\n        ]\n        this._selectedType = {} //null object\n        this._selectedFormat = {}\n        makeAutoObservable(this) //теперь mobx будет следить за изм этих переменных\n    }\n\n    //Actionы\n    // - любой блок кода, который может изменять такие данные (state): пользовательские события, внутренние данные и т.д.\n    setTypes(types) {\n        this._types = types\n    }\n\n    setFormats(formats) {\n        this._formats = formats\n    }\n\n    setCourses(courses) {\n        this._courses = courses\n    }\n\n    setSelectedType(type) {\n        this._selectedType = type\n    }\n\n    setSelectedFormat(format) {\n        this._selectedFormat = format\n    }\n\n    //создадим геттеры - для получения каких-то пременных из состояния\n    //вызываются только в том случае, если перменная кя была внутри была изменена\n    get types() {\n        return this._types\n    }\n\n    get formats() {\n        return this._formats\n    }\n\n    get courses() {\n        return this._courses\n    }\n\n    get selectedType() {\n        return this._selectedType\n    }\n\n    get selectedFormat() {\n        return this._selectedFormat\n    }\n\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC,eAAe,MAAMC,WAAW,CAAC;EAC7B;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,MAAM,GAAG,EAEb;IACD,IAAI,CAACC,QAAQ,GAAG,EAEf;IACD,IAAI,CAACC,QAAQ,GAAG,EACf;IACD,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC,EAAC;IACxB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;IACzBP,kBAAkB,CAAC,IAAI,CAAC,EAAC;EAC7B;;EAEA;EACA;EACAQ,QAAQA,CAACC,KAAK,EAAE;IACZ,IAAI,CAACN,MAAM,GAAGM,KAAK;EACvB;EAEAC,UAAUA,CAACC,OAAO,EAAE;IAChB,IAAI,CAACP,QAAQ,GAAGO,OAAO;EAC3B;EAEAC,UAAUA,CAACC,OAAO,EAAE;IAChB,IAAI,CAACR,QAAQ,GAAGQ,OAAO;EAC3B;EAEAC,eAAeA,CAACC,IAAI,EAAE;IAClB,IAAI,CAACT,aAAa,GAAGS,IAAI;EAC7B;EAEAC,iBAAiBA,CAACC,MAAM,EAAE;IACtB,IAAI,CAACV,eAAe,GAAGU,MAAM;EACjC;;EAEA;EACA;EACA,IAAIR,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACN,MAAM;EACtB;EAEA,IAAIQ,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACP,QAAQ;EACxB;EAEA,IAAIS,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACR,QAAQ;EACxB;EAEA,IAAIa,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAACZ,aAAa;EAC7B;EAEA,IAAIa,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACZ,eAAe;EAC/B;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}