{"ast":null,"code":"var _jsxFileName = \"/Users/darialadilova/Desktop/AUTH/client/src/components/AppRouter.js\",\n  _s = $RefreshSig$();\n//логика навигации по страницам\nimport React, { useContext } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { authRoutes, publicRoutes } from '../routes';\nimport { COURSES_ROUTE } from '../utils/consts';\nimport { Context } from '../index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppRouter = _s(observer(_c = _s(() => {\n  _s();\n  const {\n    user\n  } = useContext(Context); //показывает авторизован пользователь или нет -  в дальнейшем будем хранить это в локал стор, отправлять токен на сервер, убеждаться в том что он валидный, и затем переменную присваивать\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [user.isAuth && authRoutes.map(_ref => {\n      let {\n        path,\n        Component\n      } = _ref;\n      return (\n        /*#__PURE__*/\n        /* для каждого эл-та массива отрисовываем роут */\n        /* exact = путь должен точно совпадать */\n        _jsxDEV(Route, {\n          path: path,\n          element: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 56\n          }, this),\n          exact: true\n        }, path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }, this)\n      );\n    }), publicRoutes.map(_ref2 => {\n      let {\n        path,\n        Component\n      } = _ref2;\n      return (\n        /*#__PURE__*/\n        /* для каждого эл-та массива отрисовываем роут */\n        /* exact = путь должен точно совпадать */\n        _jsxDEV(Route, {\n          path: path,\n          element: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 56\n          }, this),\n          exact: true\n        }, path, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this)\n      );\n    }), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: COURSES_ROUTE,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}, \"y3FQDew7UyrSqYkvQcTdCsLbAB8=\")), \"y3FQDew7UyrSqYkvQcTdCsLbAB8=\");\n_c2 = AppRouter;\nexport default AppRouter;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppRouter$observer\");\n$RefreshReg$(_c2, \"AppRouter\");","map":{"version":3,"names":["React","useContext","Routes","Route","Navigate","authRoutes","publicRoutes","COURSES_ROUTE","Context","jsxDEV","_jsxDEV","AppRouter","_s","observer","_c","user","children","isAuth","map","_ref","path","Component","element","fileName","_jsxFileName","lineNumber","columnNumber","exact","_ref2","to","replace","_c2","$RefreshReg$"],"sources":["/Users/darialadilova/Desktop/AUTH/client/src/components/AppRouter.js"],"sourcesContent":["//логика навигации по страницам\nimport React, { useContext } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom'\nimport { authRoutes, publicRoutes } from '../routes';\nimport { COURSES_ROUTE } from '../utils/consts';\nimport { Context } from '../index';\n\nconst AppRouter = observer(() => {\n    const { user } = useContext(Context); //показывает авторизован пользователь или нет -  в дальнейшем будем хранить это в локал стор, отправлять токен на сервер, убеждаться в том что он валидный, и затем переменную присваивать\n    return (\n        <Routes>\n            {/* если не один из роутсов не отрабатывает - отрабатывает последний */}\n            {/* импорт массива с роутами */}\n            {user.isAuth && authRoutes.map(({ path, Component }) =>\n                /* для каждого эл-та массива отрисовываем роут */\n                /* exact = путь должен точно совпадать */\n                <Route key={path} path={path} element={<Component />} exact />\n            )}\n            {publicRoutes.map(({ path, Component }) =>\n                /* для каждого эл-та массива отрисовываем роут */\n                /* exact = путь должен точно совпадать */\n                <Route key={path} path={path} element={<Component />} exact />\n            )}\n            <Route path=\"*\" element={<Navigate to={COURSES_ROUTE} replace />} />\n        </Routes>\n    );\n});\n\nexport default AppRouter;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAC1D,SAASC,UAAU,EAAEC,YAAY,QAAQ,WAAW;AACpD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,OAAO,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,SAAS,GAAAC,EAAA,CAAGC,QAAQ,CAAAC,EAAA,GAAAF,EAAA,CAAC,MAAM;EAAAA,EAAA;EAC7B,MAAM;IAAEG;EAAK,CAAC,GAAGd,UAAU,CAACO,OAAO,CAAC,CAAC,CAAC;EACtC,oBACIE,OAAA,CAACR,MAAM;IAAAc,QAAA,GAGFD,IAAI,CAACE,MAAM,IAAIZ,UAAU,CAACa,GAAG,CAACC,IAAA;MAAA,IAAC;QAAEC,IAAI;QAAEC;MAAU,CAAC,GAAAF,IAAA;MAAA;QAAA;QAC/C;QACA;QACAT,OAAA,CAACP,KAAK;UAAYiB,IAAI,EAAEA,IAAK;UAACE,OAAO,eAAEZ,OAAA,CAACW,SAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAI;UAACC,KAAK;QAAA,GAA/CP,IAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAA8C;IAAA,EACjE,EACApB,YAAY,CAACY,GAAG,CAACU,KAAA;MAAA,IAAC;QAAER,IAAI;QAAEC;MAAU,CAAC,GAAAO,KAAA;MAAA;QAAA;QAClC;QACA;QACAlB,OAAA,CAACP,KAAK;UAAYiB,IAAI,EAAEA,IAAK;UAACE,OAAO,eAAEZ,OAAA,CAACW,SAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAI;UAACC,KAAK;QAAA,GAA/CP,IAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAA8C;IAAA,EACjE,eACDhB,OAAA,CAACP,KAAK;MAACiB,IAAI,EAAC,GAAG;MAACE,OAAO,eAAEZ,OAAA,CAACN,QAAQ;QAACyB,EAAE,EAAEtB,aAAc;QAACuB,OAAO;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/D;AAEjB,CAAC,kCAAC;AAACK,GAAA,GAnBGpB,SAAS;AAqBf,eAAeA,SAAS;AAAC,IAAAG,EAAA,EAAAiB,GAAA;AAAAC,YAAA,CAAAlB,EAAA;AAAAkB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}