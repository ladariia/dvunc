{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nexport default class CourseStore {\n  //работа с mobx\n  constructor() {\n    this._types = [{\n      type_id: 1,\n      type_name: 'Повышение квалификации'\n    }, {\n      type_id: 2,\n      type_name: 'Профессиональная переподготовка'\n    }];\n    this._formats = [{\n      format_id: 1,\n      format_name: 'Онлайн'\n    }, {\n      format_id: 2,\n      format_name: 'Офлайн'\n    }, {\n      format_id: 2,\n      format_name: 'Онлайн + офлайн'\n    }];\n    this._courses = [{\n      course_id: 1,\n      course_name: 'Курс 1',\n      course_duration: 180,\n      course_price: 35000\n    }, {\n      course_id: 2,\n      course_name: 'Курс 2',\n      course_duration: 18,\n      course_price: 3500\n    }, {\n      course_id: 3,\n      course_name: 'Курс 3',\n      course_duration: 1800,\n      course_price: 350000\n    }, {\n      course_id: 4,\n      course_name: 'Курс 4',\n      course_duration: 180,\n      course_price: 35000\n    }];\n    this._selectedType = {}; //null object\n    makeAutoObservable(this); //теперь mobx будет следить за изм этих переменных\n  }\n\n  //Actionы\n  // - любой блок кода, который может изменять такие данные (state): пользовательские события, внутренние данные и т.д.\n  setTypes(types) {\n    this._types = types;\n  }\n  setFormats(formats) {\n    this._formats = formats;\n  }\n  setCourses(courses) {\n    this._courses = courses;\n  }\n  setSelectedType(type) {\n    this._selectedType = type;\n  }\n\n  //создадим геттеры - для получения каких-то пременных из состояния\n  //вызываются только в том случае, если перменная кя была внутри была изменена\n  get types() {\n    return this._types;\n  }\n  get formats() {\n    return this._formats;\n  }\n  get courses() {\n    return this._courses;\n  }\n  get selectedType() {\n    return this._selectedType;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","CourseStore","constructor","_types","type_id","type_name","_formats","format_id","format_name","_courses","course_id","course_name","course_duration","course_price","_selectedType","setTypes","types","setFormats","formats","setCourses","courses","setSelectedType","type","selectedType"],"sources":["/Users/darialadilova/Desktop/AUTH/client/src/store/CourseStore.js"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport default class CourseStore {\n    //работа с mobx\n    constructor() {\n        this._types = [\n            { type_id: 1, type_name: 'Повышение квалификации' },\n            { type_id: 2, type_name: 'Профессиональная переподготовка' }\n        ]\n        this._formats = [\n            { format_id: 1, format_name: 'Онлайн' },\n            { format_id: 2, format_name: 'Офлайн' },\n            { format_id: 2, format_name: 'Онлайн + офлайн' }\n        ]\n        this._courses = [\n            { course_id: 1, course_name: 'Курс 1', course_duration: 180, course_price: 35000 },\n            { course_id: 2, course_name: 'Курс 2', course_duration: 18, course_price: 3500 },\n            { course_id: 3, course_name: 'Курс 3', course_duration: 1800, course_price: 350000 },\n            { course_id: 4, course_name: 'Курс 4', course_duration: 180, course_price: 35000 },\n        ]\n        this._selectedType = {} //null object\n        makeAutoObservable(this) //теперь mobx будет следить за изм этих переменных\n    }\n\n    //Actionы\n    // - любой блок кода, который может изменять такие данные (state): пользовательские события, внутренние данные и т.д.\n    setTypes(types) {\n        this._types = types\n    }\n\n    setFormats(formats) {\n        this._formats = formats\n    }\n\n    setCourses(courses) {\n        this._courses = courses\n    }\n\n    setSelectedType(type) {\n        this._selectedType = type\n    }\n\n    //создадим геттеры - для получения каких-то пременных из состояния\n    //вызываются только в том случае, если перменная кя была внутри была изменена\n    get types() {\n        return this._types\n    }\n\n    get formats() {\n        return this._formats\n    }\n\n    get courses() {\n        return this._courses\n    }\n\n    get selectedType() {\n        return this._selectedType\n    }\n\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC,eAAe,MAAMC,WAAW,CAAC;EAC7B;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,MAAM,GAAG,CACV;MAAEC,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAyB,CAAC,EACnD;MAAED,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAkC,CAAC,CAC/D;IACD,IAAI,CAACC,QAAQ,GAAG,CACZ;MAAEC,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAS,CAAC,EACvC;MAAED,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAS,CAAC,EACvC;MAAED,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAkB,CAAC,CACnD;IACD,IAAI,CAACC,QAAQ,GAAG,CACZ;MAAEC,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE,QAAQ;MAAEC,eAAe,EAAE,GAAG;MAAEC,YAAY,EAAE;IAAM,CAAC,EAClF;MAAEH,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE,QAAQ;MAAEC,eAAe,EAAE,EAAE;MAAEC,YAAY,EAAE;IAAK,CAAC,EAChF;MAAEH,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE,QAAQ;MAAEC,eAAe,EAAE,IAAI;MAAEC,YAAY,EAAE;IAAO,CAAC,EACpF;MAAEH,SAAS,EAAE,CAAC;MAAEC,WAAW,EAAE,QAAQ;MAAEC,eAAe,EAAE,GAAG;MAAEC,YAAY,EAAE;IAAM,CAAC,CACrF;IACD,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC,EAAC;IACxBd,kBAAkB,CAAC,IAAI,CAAC,EAAC;EAC7B;;EAEA;EACA;EACAe,QAAQA,CAACC,KAAK,EAAE;IACZ,IAAI,CAACb,MAAM,GAAGa,KAAK;EACvB;EAEAC,UAAUA,CAACC,OAAO,EAAE;IAChB,IAAI,CAACZ,QAAQ,GAAGY,OAAO;EAC3B;EAEAC,UAAUA,CAACC,OAAO,EAAE;IAChB,IAAI,CAACX,QAAQ,GAAGW,OAAO;EAC3B;EAEAC,eAAeA,CAACC,IAAI,EAAE;IAClB,IAAI,CAACR,aAAa,GAAGQ,IAAI;EAC7B;;EAEA;EACA;EACA,IAAIN,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACb,MAAM;EACtB;EAEA,IAAIe,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACZ,QAAQ;EACxB;EAEA,IAAIc,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACX,QAAQ;EACxB;EAEA,IAAIc,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAACT,aAAa;EAC7B;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}